// This file is part of mathtrader.
//
// Copyright (C) 2021 George Ioannidis
//
// mathtrader is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// mathtrader is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with mathtrader. If not, see <http://www.gnu.org/licenses/>.

// Proto definition for the mathtrade input, i.e., the result of parsing the
// Online Want List Generator (OLWLG) file.

syntax = "proto2";

package mathtrader.parser;

import "mathtrader/common/item.proto";
import "mathtrader/common/wantlist.proto";

// Message encapsulating the trade input.
// Next id: 7
message ParserResult {
  // The wantlists generated by OLWLG.
  repeated common.Wantlist wantlists = 1;

  // All parsed items, including dummies, indexed by Item::id.
  map<string, common.Item> items = 6;

  // Users with trading items.
  repeated string users = 2;

  // The number of items with an official name. This treats copies of individual
  // items as unique items. If no official names have been given, it corresponds
  // to the number of wantlists.
  optional int32 item_count = 3;

  // Encapsulates a missing item: a wanted item with no official name.
  message MissingItem {
    optional string item_id = 1;
    optional int32 frequency = 2;  // occurences across the entire input
  }

  // Tracks the missing items across the entire parser input.
  repeated MissingItem missing_items = 4;

  // Encapsulates an that has been repeated multiple times in a given wantlist.
  // Each wantlist is identified by the offered item id. The username is also
  // provided, because multiple users may define the same dummy item.
  message DuplicateWantedItem {
    optional string wanted_item_id = 1;
    optional string offered_item_id = 2;
    optional string username = 3;

    // How many times the wanted item is defined in the wantlist. Expected:
    // frequency > 1.
    optional int32 frequency = 4;
  }

  // Tracks duplicate wanted items in wantlists.
  repeated DuplicateWantedItem duplicate_wanted_items = 5;
}
