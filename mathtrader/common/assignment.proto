// This file is part of mathtrader.
//
// Copyright (C) 2021 George Ioannidis
//
// mathtrader is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// mathtrader is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with mathtrader. If not, see <http://www.gnu.org/licenses/>.

// Proto definition for an Assignment and its components.

syntax = "proto2";

package mathtrader;

// Message encapsulating a Node of the Assignment models the math trade.
// Generally, represents an item.
message Node {
  // Item types that the Node may represent.
  enum ItemType {
    kNull = 0;
    kOffered = 1;  // An offered item.
    kWanted = 2;   // A wanted item.
  }

  // The identifying id of the Node.
  optional string id = 1;

  // Specifies the item type the Node represents, if applicable.
  optional ItemType item_type = 3 [deprecated = true];

  // Specifies the "symmetric" item Node id. If the Node represents an offered
  // item, specifies the respective wanted item and vice-versa.
  optional string symmetric_node = 4 [deprecated = true];

  // The original item id, if applicable.
  optional string item_id = 5;

  // The username associated with the item id, if applicable.
  optional string username = 6;

  reserved 2;
}

// Message encapsulating a directed Arc within a Assignment, representing a
// valid matching "offered -> wanted".
message Arc {
  optional string offered = 1;                // Outbound item.
  optional string wanted = 2;                 // Inbound item.
  optional int64 capacity = 3 [default = 1];  // Max supported capacity.
  optional int64 cost = 4;                    // Associated cost if used.
}

// Message encapsulating an Assignment, representing the math trade. Defines
// the trading items and valid matchings between them. Each item is considered
// to be both an offered and a wanted item. Each offered itemhas to be assigned
// to exactly one wanted item. The valid offered-wanted matchings are defined by
// the `arcs` field. Each item can always be assigned to itself, representing
// the item not being traded.
message Assignment {
  // Represent valid matchings between offered and wanted items.
  repeated Arc arcs = 3;

  reserved 1, 2;
}
